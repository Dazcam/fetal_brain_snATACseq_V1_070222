CA_PEAKS <- cbind(query_peaks_info_no_chr, subject_peaks_info_no_chr, CA_PEAKS)
peaks_diff_cell_type_rm <- sum(CA_PEAKS$query_cell_type == CA_PEAKS$subject_cell_type)
cat('Total cA peak pairs in ', REGION, ' after conversion: ', nrow(CA_PEAKS), '\n')
cat('Total cA peak pairs in ', REGION, ' after corralation between peaks from different cell types removed: ', peaks_diff_cell_type_rm, '\n')
assign(paste0(REGION, '_cA_peaks_combined'), CA_PEAKS)
assign(paste0(REGION, '_cA_query_peaks_combined'), query_peaks_info_with_chr)
assign(paste0(REGION, '_cA_subject_peaks_combined'), subject_peaks_info_with_chr)
write_tsv(CA_PEAKS, paste0(REGION, '_cA_peaks_combined.tsv'))
}
for (REGION in REGIONS) {
cat('\nRunning ', REGION, ' ...\n')
CA_PEAKS <- get(paste0(REGION, '_cA_peaks'))
CA_METADATA <- get(paste0(REGION, '_cA_metadata'))
query_peaks_idx <- CA_PEAKS$queryHits
subject_peaks_idx <- CA_PEAKS$subjectHits
# Pull peak information for indices from metadata
query_peaks_info <- CA_METADATA[query_peaks_idx]
subject_peaks_info <- CA_METADATA[subject_peaks_idx]
# Move names to column as df conversion chokes due to identical rownames
mcols(query_peaks_info)$query_cell_type <- names(query_peaks_info)
mcols(subject_peaks_info)$subject_cell_type <- names(subject_peaks_info)
names(query_peaks_info) <- NULL
names(subject_peaks_info) <- NULL
# Convert peak info to df
query_peaks_info_no_chr <- annoGR2DF(query_peaks_info) %>%
dplyr::select(query_cell_type, start, end)
subject_peaks_info_no_chr <- annoGR2DF(subject_peaks_info) %>%
dplyr::select(subject_cell_type, start, end)
colnames(query_peaks_info_no_chr) <- c("query_cell_type", "query_start", "query_end")
colnames(subject_peaks_info_no_chr) <- c("subject_cell_type", "subject_start", "subject_end")
# Save peak info with chr
query_peaks_info_with_chr <- annoGR2DF(query_peaks_info) %>%
dplyr::select(chr, start, end, query_cell_type)
subject_peaks_info_with_chr <- annoGR2DF(subject_peaks_info) %>%
dplyr::select(chr, start, end, subject_cell_type)
# Convert peaks S4 df to S3
CA_PEAKS <- as.data.frame(CA_PEAKS)
CA_PEAKS <- cbind(query_peaks_info_no_chr, subject_peaks_info_no_chr, CA_PEAKS)
peaks_diff_cell_type_rm <- sum(CA_PEAKS$query_cell_type == CA_PEAKS$subject_cell_type)
cat('Total cA peak pairs in ', REGION, ' after conversion: ', nrow(CA_PEAKS), '\n')
cat('Total cA peak pairs in ', REGION, ' after corralation between peaks from different cell types removed: ', peaks_diff_cell_type_rm, '\n')
assign(paste0(REGION, '_cA_peaks_combined'), CA_PEAKS)
assign(paste0(REGION, '_cA_query_peaks_combined'), query_peaks_info_with_chr)
assign(paste0(REGION, '_cA_subject_peaks_combined'), subject_peaks_info_with_chr)
write_tsv(CA_PEAKS, paste0(CA_DIR, REGION, '_cA_peaks_combined.tsv'))
}
snps <- read_excel(paste0(IN_DIR, 'PGC3_Sup_table_3_combined_discovery_replication_loci_jul21.xls')) %>%
dplyr::select(`top-index`) %>%
filter(!grepl('8:4180090_T_A', `top-index`)) %>%
base::as.data.frame(snps)
library(LDlinkR)
library(readxl)
library(tidyverse)
library(Repitools)
##  Define global variables  -----------------------------------------------------------
cat('\nDefining variables ... \n')
IN_DIR <- "~/Desktop/fetal_brain_snATACseq_070222/resources/sheets/"
SNP_DIR <- "~/Desktop/fetal_brain_snATACseq_070222/results/PGC3_snps/"
PEAK_DIR <- "~/Desktop/fetal_brain_snATACseq_070222/results/peaks/"
REGIONS <- c("FC", "GE")
CELL_TYPES <- c("FC.ExN", "FC.InN", "FC.RG", "FC.MG", "FC.undef", "LGE.InN", "MGE.InN", "CGE.InN", "GE.RG", "GE.Proj")
TOKEN <- "" # Needed for LDlinkR -
snps <- read_excel(paste0(IN_DIR, 'PGC3_Sup_table_3_combined_discovery_replication_loci_jul21.xls')) %>%
dplyr::select(`top-index`) %>%
filter(!grepl('8:4180090_T_A', `top-index`)) %>%
base::as.data.frame(snps)
snps
library(LDlinkR)
library(readxl)
library(tidyverse)
library(Repitools)
##  Define global variables  -----------------------------------------------------------
cat('\nDefining variables ... \n')
IN_DIR <- "~/Desktop/fetal_brain_snATACseq_070222/resources/sheets/"
SNP_DIR <- "~/Desktop/fetal_brain_snATACseq_070222/results/PGC3_snps/"
PEAK_DIR <- "~/Desktop/fetal_brain_snATACseq_070222/results/peaks/"
REGIONS <- c("FC", "GE")
CELL_TYPES <- c("FC.ExN", "FC.InN", "FC.RG", "FC.MG", "FC.undef", "LGE.InN", "MGE.InN", "CGE.InN", "GE.RG", "GE.Proj")
TOKEN <- "" # Needed for LDlinkR - saved in email
##  Create directories  ----------------------------------------------------------------
dir.create(SNP_DIR)
setwd(SNP_DIR) # Required as LDproxy_batch outputs to cwd
read_excel(paste0(IN_DIR, 'PGC3_SCZ_Supplementary_Table_11_FINEMAP_UPDATED.xlsx'))
?read_excel
read_excel(paste0(IN_DIR, 'PGC3_SCZ_Supplementary_Table_11_FINEMAP_UPDATED.xlsx'), sheet = 'ST11a 95% Credible Sets') %>%
dplyr::select(rsid)
read_excel(paste0(IN_DIR, 'PGC3_SCZ_Supplementary_Table_11_FINEMAP_UPDATED.xlsx'), sheet = 'ST11a 95% Credible Sets') %>%
dplyr::select(rsid) %>%
filter(grepl(':|_')
)
read_excel(paste0(IN_DIR, 'PGC3_SCZ_Supplementary_Table_11_FINEMAP_UPDATED.xlsx'), sheet = 'ST11a 95% Credible Sets') %>%
dplyr::select(rsid) %>%
filter(grepl(':|_', rsid))
warnings()
snps <- read_excel(paste0(IN_DIR, 'PGC3_SCZ_Supplementary_Table_11_FINEMAP_UPDATED.xlsx'), sheet = 'ST11a 95% Credible Sets') %>%
dplyr::select(rsid) %>%
filter(!grepl(':|_', rsID)) %>% # 23 SNPs with 1:28690628_T_C  encoding removed for now
base::as.data.frame(snps)
snps
read_excel(paste0(IN_DIR, 'PGC3_SCZ_Supplementary_Table_11_FINEMAP_UPDATED.xlsx'), sheet = 'ST11a 95% Credible Sets') %>%
dplyr::select(rsid)
read_excel(paste0(IN_DIR, 'PGC3_SCZ_Supplementary_Table_11_FINEMAP_UPDATED.xlsx'), sheet = 'ST11a 95% Credible Sets') %>%
dplyr::select(rsid) %>%
filter(!grepl(':|_', rsID))
read_excel(paste0(IN_DIR, 'PGC3_SCZ_Supplementary_Table_11_FINEMAP_UPDATED.xlsx'), sheet = 'ST11a 95% Credible Sets') %>%
dplyr::select(rsid) %>%
filter(!grepl(':', rsID)) %>% # 23 SNPs with 1:28690628_T_C  encoding removed for now
base::as.data.frame(snps)
read_excel(paste0(IN_DIR, 'PGC3_SCZ_Supplementary_Table_11_FINEMAP_UPDATED.xlsx'), sheet = 'ST11a 95% Credible Sets') %>%
dplyr::select(rsid) %>%
filter(!grepl(':|_', rsid)) %>% # 23 SNPs with 1:28690628_T_C  encoding removed for now
base::as.data.frame(snps)
snps <- read_excel(paste0(IN_DIR, 'PGC3_SCZ_Supplementary_Table_11_FINEMAP_UPDATED.xlsx'), sheet = 'ST11a 95% Credible Sets') %>%
dplyr::select(rsid) %>%
filter(!grepl(':|_', rsid)) %>% # 23 SNPs with 1:28690628_T_C  encoding removed for now
base::as.data.frame(snps)
snps
read_excel(paste0(IN_DIR, 'PGC3_SCZ_Supplementary_Table_11_FINEMAP_UPDATED.xlsx'), sheet = 'ST11a 95% Credible Sets') %>%
dplyr::select(rsid) %>%
filter(!grepl(':|_', rsid)) %>% # 23 SNPs with 1:28690628_T_C  encoding removed for now
base::as.data.frame(snps)
read_excel(paste0(IN_DIR, 'PGC3_SCZ_Supplementary_Table_11_FINEMAP_UPDATED.xlsx'), sheet = 'ST11a 95% Credible Sets') %>%
dplyr::select(rsid) %>%
filter(!grepl(':|_', rsid)) %>% # 23 SNPs with 1:28690628_T_C  encoding removed for now
base::as.data.frame(snps) %>%
distinct(rsid, .keep_all = TRUE)
snps <- read_excel(paste0(IN_DIR, 'PGC3_SCZ_Supplementary_Table_11_FINEMAP_UPDATED.xlsx'), sheet = 'ST11a 95% Credible Sets') %>%
dplyr::select(rsid) %>%
filter(!grepl(':|_', rsid)) %>% # 23 SNPs with 1:28690628_T_C  encoding removed for now
base::as.data.frame(snps) %>%
distinct(rsid, .keep_all = TRUE)
read_excel(paste0(IN_DIR, 'PGC3_SCZ_Supplementary_Table_11_FINEMAP_UPDATED.xlsx'), sheet = 'ST11a 95% Credible Sets') %>%
dplyr::select(rsid) %>%
filter(!grepl(':|_', rsid)) %>% # 23 SNPs with 1:28690628_T_C  encoding removed for now
base::as.data.frame(snps) %>%
distinct(rsid, .keep_all = TRUE) %>%
arrange()
read_excel(paste0(IN_DIR, 'PGC3_SCZ_Supplementary_Table_11_FINEMAP_UPDATED.xlsx'), sheet = 'ST11a 95% Credible Sets') %>%
dplyr::select(rsid) %>%
filter(!grepl(':|_', rsid)) %>% # 23 SNPs with 1:28690628_T_C  encoding removed for now
base::as.data.frame(snps) %>%
distinct(rsid, .keep_all = TRUE) %>%
arrange(rsid)
snps <- read_excel(paste0(IN_DIR, 'PGC3_SCZ_Supplementary_Table_11_FINEMAP_UPDATED.xlsx'), sheet = 'ST11a 95% Credible Sets') %>%
dplyr::select(rsid) %>%
filter(!grepl(':|_', rsid)) %>% # 23 SNPs with 1:28690628_T_C  encoding removed for now
base::as.data.frame(snps) %>%
distinct(rsid, .keep_all = TRUE) %>%
arrange(rsid)
snps <- read_excel(paste0(IN_DIR, 'PGC3_SCZ_Supplementary_Table_11_FINEMAP_UPDATED.xlsx'), sheet = 'ST11a 95% Credible Sets') %>%
dplyr::select(rsid) %>%
filter(!grepl(':|_', rsid)) %>% # 23 SNPs with 1:28690628_T_C  encoding removed for now
base::as.data.frame(snps) %>%
distinct(rsid, .keep_all = TRUE) %>%
arrange(rsid) %>%
pull()
## Get hg38 base postions for rsIDs using biomaRt -------------------------------------
## ~15-40 mins per 50K SNPs - note sometimes crashes when BiomaRt in heavy use
cat('\nUsing BiomaRt to get hg38 base postions for SNP rsIDs  ... \n')
ensembl <- useEnsembl("ENSEMBL_MART_SNP", dataset = "hsapiens_snp")
# Need to batch the query: https://support.bioconductor.org/p/23684/
SNPs <- getBM(attributes=c("refsnp_id",
"chr_name",
"chrom_start",
"chrom_end"),
filters ="snp_filter",
values = scz_snps,
mart = ensembl,
uniqueRows=TRUE)
##  Load Packages  --------------------------------------------------------------------
library(LDlinkR)
library(readxl)
library(tidyverse)
library(Repitools)
library(biomaRt)
cat('\nUsing BiomaRt to get hg38 base postions for SNP rsIDs  ... \n')
ensembl <- useEnsembl("ENSEMBL_MART_SNP", dataset = "hsapiens_snp")
# Need to batch the query: https://support.bioconductor.org/p/23684/
SNPs <- getBM(attributes=c("refsnp_id",
"chr_name",
"chrom_start",
"chrom_end"),
filters ="snp_filter",
values = scz_snps,
mart = ensembl,
uniqueRows=TRUE)
SNPs <- getBM(attributes=c("refsnp_id",
"chr_name",
"chrom_start",
"chrom_end"),
filters ="snp_filter",
values = snps,
mart = ensembl,
uniqueRows=TRUE)
cat(paste0(nrow(SNPs), ' SNPs retained after lift over to hg38.\n'))
cat(paste0(nrow(snps), ' SNPs retained from PGC3 table.\n'))
cat(paste0(length(snps), ' SNPs retained from PGC3 table.\n'))
cat('\nRemoving SNPs on CHR patches ... \n')
snps_no_patches <- SNPs %>%
filter(!grepl('_', chr_name)) %>%
dplyr::select(-chrom_end) %>%
dplyr::rename('snpID' = refsnp_id, 'hg38_base_position' = chrom_start)
cat(paste0(nrow(snps_no_patches), ' SNPs retained. \n'))
SNP_DIR <- "~/Desktop/fetal_brain_snATACseq_070222/results/PGC3_snps/fine_mapped/"
##  Create directories  ----------------------------------------------------------------
dir.create(SNP_DIR)
snps_no_patches
snps
# Add posterior probability and index SNPs columns
snps_no_patches %>% left_join(snps <- read_excel(paste0(IN_DIR, 'PGC3_SCZ_Supplementary_Table_11_FINEMAP_UPDATED.xlsx'), sheet = 'ST11a 95% Credible Sets'))
read_excel(paste0(IN_DIR, 'PGC3_SCZ_Supplementary_Table_11_FINEMAP_UPDATED.xlsx'), sheet = 'ST11a 95% Credible Sets')
snps_no_patches <- SNPs %>%
filter(!grepl('_', chr_name)) %>%
dplyr::select(-chrom_end) %>%
dplyr::rename('rsid' = refsnp_id, 'hg38_base_position' = chrom_start)
cat(paste0(nrow(snps_no_patches), ' SNPs retained. \n'))
snps_no_patches %>% left_join(snps <- read_excel(paste0(IN_DIR, 'PGC3_SCZ_Supplementary_Table_11_FINEMAP_UPDATED.xlsx'), sheet = 'ST11a 95% Credible Sets'))
snps_no_patches %>% left_join(snps <- read_excel(paste0(IN_DIR, 'PGC3_SCZ_Supplementary_Table_11_FINEMAP_UPDATED.xlsx'), sheet = 'ST11a 95% Credible Sets')) %>%
select(rsid, chr_name, hg38_base_position. index_snp, finemap_posterior_probability)
snps_no_patches %>% left_join(snps <- read_excel(paste0(IN_DIR, 'PGC3_SCZ_Supplementary_Table_11_FINEMAP_UPDATED.xlsx'), sheet = 'ST11a 95% Credible Sets')) %>%
select(rsid, chr_name, hg38_base_position, index_snp, finemap_posterior_probability)
snps_no_patches %>% left_join(snps <- read_excel(paste0(IN_DIR, 'PGC3_SCZ_Supplementary_Table_11_FINEMAP_UPDATED.xlsx'), sheet = 'ST11a 95% Credible Sets'))
SNPs_join <- snps_no_patches %>%
left_join(snps <- read_excel(paste0(IN_DIR, 'PGC3_SCZ_Supplementary_Table_11_FINEMAP_UPDATED.xlsx'), sheet = 'ST11a 95% Credible Sets'))
snps_no_patches %>%
left_join(snps <- read_excel(paste0(IN_DIR, 'PGC3_SCZ_Supplementary_Table_11_FINEMAP_UPDATED.xlsx'), sheet = 'ST11a 95% Credible Sets')) %>%
select(rsid, chr_name, hg38_base_position, index_snp, finemap_posterior_probability)
SNPs_join <- snps_no_patches %>%
left_join(snps <- read_excel(paste0(IN_DIR, 'PGC3_SCZ_Supplementary_Table_11_FINEMAP_UPDATED.xlsx'), sheet = 'ST11a 95% Credible Sets')) %>%
dplyr::select(rsid, chr_name, hg38_base_position, index_snp, finemap_posterior_probability)
SNPs_join
# Write to file
write_tsv(as.data.frame(SNPs_join), 'pgc3_scz_finemapped_SNPs_hg38.tsv')
dir.create(paste0(PEAK_DIR, 'fine_mapped_SNPs/'))
## Check for overlap of SNPs in snATACseq peaks of individual cell types  -------------
for (CELL_TYPE in CELL_TYPES) {
cat(paste0('\nLoading peaks for ', CELL_TYPE, ' ... \n'))
peaks_df <- read_tsv(paste0(PEAK_DIR, CELL_TYPE,'.hg38.ext500bp.bed'), col_names = FALSE)
colnames(peaks_df) <- c('chr', 'start', 'end', 'name', 'score', 'strand')
cell_overlaps <- data.frame()
cat(paste0('\nChecking for SNP overlaps in ', CELL_TYPE, ' ... \n'))
for (i in 1:nrow(snps_no_patches)) {
BASE_POSITION <- snps_no_patches$hg38_base_position[i]
CHR <- snps_no_patches$chr_name[i]
cat(paste0('\nSNP: ',
snps_no_patches$snpID[i], ', position: ',
BASE_POSITION, '... \n'))
overlaps <- filter(peaks_df, start <= BASE_POSITION, end >= BASE_POSITION, chr == paste0('chr', CHR))
if (nrow(overlaps) > 0) {
overlaps <- cbind(overlaps, snps_no_patches[i,])
print(overlaps)
}
cell_overlaps <- rbind(cell_overlaps, overlaps)
}
cat(paste0('\nAll ', nrow(snps_no_patches), ' SNPs checked in ', CELL_TYPE, ' ... \n'))
cat(paste0('\nWriting overlapping SNPs to file ... \n'))
write_tsv(cell_overlaps, paste0(PEAK_DIR, 'fine_mapped_SNPs', CELL_TYPE,'_PGC3_SCZ_finemapped_SNP_peak_overlaps_ext500bp.tsv'))
assign(paste0(CELL_TYPE, '_SNP_overlaps'), cell_overlaps)
}
snps_no_patches
## Check for overlap of SNPs in snATACseq peaks of individual cell types  -------------
for (CELL_TYPE in CELL_TYPES) {
cat(paste0('\nLoading peaks for ', CELL_TYPE, ' ... \n'))
peaks_df <- read_tsv(paste0(PEAK_DIR, CELL_TYPE,'.hg38.ext500bp.bed'), col_names = FALSE)
colnames(peaks_df) <- c('chr', 'start', 'end', 'name', 'score', 'strand')
cell_overlaps <- data.frame()
cat(paste0('\nChecking for SNP overlaps in ', CELL_TYPE, ' ... \n'))
for (i in 1:nrow(snps_no_patches)) {
BASE_POSITION <- snps_no_patches$hg38_base_position[i]
CHR <- snps_no_patches$chr_name[i]
cat(paste0('\nSNP: ',
snps_no_patches$snpID[i], ', position: ',
BASE_POSITION, '... \n'))
overlaps <- filter(peaks_df, start <= BASE_POSITION, end >= BASE_POSITION, chr == paste0('chr', CHR))
if (nrow(overlaps) > 0) {
overlaps <- cbind(overlaps, snps_no_patches[i,])
print(overlaps)
}
cell_overlaps <- rbind(cell_overlaps, overlaps)
}
cat(paste0('\nAll ', nrow(snps_no_patches), ' SNPs checked in ', CELL_TYPE, ' ... \n'))
cat(paste0('\nWriting overlapping SNPs to file ... \n'))
write_tsv(cell_overlaps, paste0(PEAK_DIR, 'fine_mapped_SNPs', CELL_TYPE,'_PGC3_SCZ_finemapped_SNP_peak_overlaps_ext500bp.tsv'))
assign(paste0(CELL_TYPE, '_SNP_overlaps'), cell_overlaps)
}
snps_no_patches$hg38_base_position[i]
snps_no_patches$chr_name[i]
cat(paste0('\nSNP: ',
snps_no_patches$rsid[i], ', position: ',
BASE_POSITION, '... \n'))
filter(peaks_df, start <= BASE_POSITION, end >= BASE_POSITION, chr == paste0('chr', CHR))
peaks_df
chr == paste0('chr', CHR))
CHR
paste0('chr', CHR)
overlaps
CELL_TYPES[1]
## Check for overlap of SNPs in snATACseq peaks of individual cell types  -------------
for (CELL_TYPE in CELL_TYPES[1]) {
cat(paste0('\nLoading peaks for ', CELL_TYPE, ' ... \n'))
peaks_df <- read_tsv(paste0(PEAK_DIR, CELL_TYPE,'.hg38.ext500bp.bed'), col_names = FALSE)
colnames(peaks_df) <- c('chr', 'start', 'end', 'name', 'score', 'strand')
cell_overlaps <- data.frame()
cat(paste0('\nChecking for SNP overlaps in ', CELL_TYPE, ' ... \n'))
for (i in 1:nrow(snps_no_patches)) {
BASE_POSITION <- snps_no_patches$hg38_base_position[i]
CHR <- snps_no_patches$chr_name[i]
cat(paste0('\nSNP: ',
snps_no_patches$rsid[i], ', position: ',
BASE_POSITION, ' ... \n'))
overlaps <- filter(peaks_df, start <= BASE_POSITION, end >= BASE_POSITION, chr == paste0('chr', CHR))
if (nrow(overlaps) > 0) {
overlaps <- cbind(overlaps, snps_no_patches[i,])
print(overlaps)
}
cell_overlaps <- rbind(cell_overlaps, overlaps)
}
cat(paste0('\nAll ', nrow(snps_no_patches), ' SNPs checked in ', CELL_TYPE, ' ... \n'))
cat(paste0('\nWriting overlapping SNPs to file ... \n'))
write_tsv(cell_overlaps, paste0(PEAK_DIR, 'fine_mapped_SNPs', CELL_TYPE,'_PGC3_SCZ_finemapped_SNP_peak_overlaps_ext500bp.tsv'))
assign(paste0(CELL_TYPE, '_SNP_overlaps'), cell_overlaps)
}
View(cell_overlaps)
rm(overlaps)
rm(cell_overlaps)
## Check for overlap of SNPs in snATACseq peaks of individual cell types  -------------
for (CELL_TYPE in CELL_TYPES[1]) {
cat(paste0('\nLoading peaks for ', CELL_TYPE, ' ... \n'))
peaks_df <- read_tsv(paste0(PEAK_DIR, CELL_TYPE,'.hg38.ext500bp.bed'), col_names = FALSE)
colnames(peaks_df) <- c('chr', 'start', 'end', 'name', 'score', 'strand')
cell_overlaps <- data.frame()
cat(paste0('\nChecking for SNP overlaps in ', CELL_TYPE, ' ... \n'))
for (i in 1:nrow(snps_no_patches)) {
BASE_POSITION <- snps_no_patches$hg38_base_position[i]
CHR <- snps_no_patches$chr_name[i]
cat(paste0('\nSNP: ',
snps_no_patches$rsid[i], ', position: ',
BASE_POSITION, ' ... \n'))
overlaps <- filter(peaks_df, start <= BASE_POSITION, end >= BASE_POSITION, chr == paste0('chr', CHR))
if (nrow(overlaps) > 0) {
overlaps <- cbind(overlaps, snps_no_patches[i,])
print(overlaps)
}
cell_overlaps <- rbind(cell_overlaps, overlaps)
}
cat(paste0('\nAll ', nrow(snps_no_patches), ' SNPs checked in ', CELL_TYPE, ' ... \n'))
cat(paste0('\nWriting overlapping SNPs to file ... \n'))
write_tsv(cell_overlaps, paste0(PEAK_DIR, 'fine_mapped_SNPs', CELL_TYPE,'_PGC3_SCZ_finemapped_SNP_peak_overlaps_ext500bp.tsv'))
assign(paste0(CELL_TYPE, '_SNP_overlaps'), cell_overlaps)
}
CELL_TYPES
for (CELL_TYPE in CELL_TYPES[2:9]) {
cat(paste0('\nLoading peaks for ', CELL_TYPE, ' ... \n'))
peaks_df <- read_tsv(paste0(PEAK_DIR, CELL_TYPE,'.hg38.ext500bp.bed'), col_names = FALSE)
colnames(peaks_df) <- c('chr', 'start', 'end', 'name', 'score', 'strand')
cell_overlaps <- data.frame()
cat(paste0('\nChecking for SNP overlaps in ', CELL_TYPE, ' ... \n'))
for (i in 1:nrow(snps_no_patches)) {
BASE_POSITION <- snps_no_patches$hg38_base_position[i]
CHR <- snps_no_patches$chr_name[i]
cat(paste0('\nSNP: ',
snps_no_patches$rsid[i], ', position: ',
BASE_POSITION, ' ... \n'))
overlaps <- filter(peaks_df, start <= BASE_POSITION, end >= BASE_POSITION, chr == paste0('chr', CHR))
if (nrow(overlaps) > 0) {
overlaps <- cbind(overlaps, snps_no_patches[i,])
print(overlaps)
}
cell_overlaps <- rbind(cell_overlaps, overlaps)
}
cat(paste0('\nAll ', nrow(snps_no_patches), ' SNPs checked in ', CELL_TYPE, ' ... \n'))
cat(paste0('\nWriting overlapping SNPs to file ... \n'))
write_tsv(cell_overlaps, paste0(PEAK_DIR, 'fine_mapped_SNPs', CELL_TYPE,'_PGC3_SCZ_finemapped_SNP_peak_overlaps_ext500bp.tsv'))
assign(paste0(CELL_TYPE, '_SNP_overlaps'), cell_overlaps)
}
View(cell_overlaps)
paste0(PEAK_DIR, 'fine_mapped_SNPs', CELL_TYPE,'_PGC3_SCZ_finemapped_SNP_peak_overlaps_ext500bp.tsv')
write_tsv(cell_overlaps, paste0(PEAK_DIR, 'fine_mapped_SNPs/', CELL_TYPE,'_PGC3_SCZ_finemapped_SNP_peak_overlaps_ext500bp.tsv'))
write_tsv(cell_overlaps, paste0(PEAK_DIR, 'fine_mapped_SNPs/', CELL_TYPE,'_PGC3_SCZ_finemapped_SNP_peak_overlaps_ext500bp.tsv'))
CELL_TYPE
CELL_TYPES
CELL_TYPES[2:10]
for (CELL_TYPE in CELL_TYPES[10]) {
cat(paste0('\nLoading peaks for ', CELL_TYPE, ' ... \n'))
peaks_df <- read_tsv(paste0(PEAK_DIR, CELL_TYPE,'.hg38.ext500bp.bed'), col_names = FALSE)
colnames(peaks_df) <- c('chr', 'start', 'end', 'name', 'score', 'strand')
cell_overlaps <- data.frame()
cat(paste0('\nChecking for SNP overlaps in ', CELL_TYPE, ' ... \n'))
for (i in 1:nrow(snps_no_patches)) {
BASE_POSITION <- snps_no_patches$hg38_base_position[i]
CHR <- snps_no_patches$chr_name[i]
cat(paste0('\nSNP: ',
snps_no_patches$rsid[i], ', position: ',
BASE_POSITION, ' ... \n'))
overlaps <- filter(peaks_df, start <= BASE_POSITION, end >= BASE_POSITION, chr == paste0('chr', CHR))
if (nrow(overlaps) > 0) {
overlaps <- cbind(overlaps, snps_no_patches[i,])
print(overlaps)
}
cell_overlaps <- rbind(cell_overlaps, overlaps)
}
cat(paste0('\nAll ', nrow(snps_no_patches), ' SNPs checked in ', CELL_TYPE, ' ... \n'))
cat(paste0('\nWriting overlapping SNPs to file ... \n'))
write_tsv(cell_overlaps, paste0(PEAK_DIR, 'fine_mapped_SNPs/', CELL_TYPE,'_PGC3_SCZ_finemapped_SNP_peak_overlaps_ext500bp.tsv'))
assign(paste0(CELL_TYPE, '_SNP_overlaps'), cell_overlaps)
}
all_SNPs_key <- rbind(FC.ExN_SNP_overlaps, FC.InN_SNP_overlaps, FC.RG_SNP_overlaps,
FC.MG_SNP_overlaps, FC.undef_SNP_overlaps, LGE.InN_SNP_overlaps,
MGE.InN_SNP_overlaps, CGE.InN_SNP_overlaps, GE.RG_SNP_overlaps,
GE.Proj_SNP_overlaps)
all_SNPs_key_df <- all_SNPs_key %>%
arrange(rsid) %>%
distinct()
all_SNPs_key_df
cat('\nCreating binary df for whether SNP is in/not in peak ... \n')
for (CELL_TYPE in CELL_TYPES) {
cat(paste0('\nObtaining binary counts for: ', CELL_TYPE, ' ... \n'))
# Test vector of rsIDs for cell type
snp_test <- get(paste0(CELL_TYPE, '_SNP_overlaps')) %>%
pull(snpID)
if (exists('all_SNPs_binary_df')) {
all_SNPs_binary_df <- all_SNPs_binary_df %>%
rowwise() %>%
mutate(!!CELL_TYPE := ifelse(rsid %in% snp_test, 1, 0)) %>%
ungroup()
} else {
all_SNPs_binary_df <- all_SNPs_key_df %>%
rowwise() %>%
mutate(!!CELL_TYPE := ifelse(rsid %in% snp_test, 1, 0)) %>%
ungroup()
}
}
for (CELL_TYPE in CELL_TYPES) {
cat(paste0('\nObtaining binary counts for: ', CELL_TYPE, ' ... \n'))
# Test vector of rsIDs for cell type
snp_test <- get(paste0(CELL_TYPE, '_SNP_overlaps')) %>%
pull(rsid)
if (exists('all_SNPs_binary_df')) {
all_SNPs_binary_df <- all_SNPs_binary_df %>%
rowwise() %>%
mutate(!!CELL_TYPE := ifelse(rsid %in% snp_test, 1, 0)) %>%
ungroup()
} else {
all_SNPs_binary_df <- all_SNPs_key_df %>%
rowwise() %>%
mutate(!!CELL_TYPE := ifelse(rsid %in% snp_test, 1, 0)) %>%
ungroup()
}
}
all_SNPs_binary_df
cat('\nWriting binary count table ... \n')
write_tsv(all_SNPs_binary_df,
paste0(PEAK_DIR,
'fine_mapped_SNPs/',
'all_cells_PGC3_SCZ_finemapped_SNP_peak_overlaps_ext500bp.tsv'))
cat('Done.\n')
paste0(PEAK_DIR,
'fine_mapped_SNPs/',
'all_cells_PGC3_SCZ_finemapped_SNP_peak_overlaps_ext500bp.tsv')
rbind(FC.ExN_SNP_overlaps, FC.InN_SNP_overlaps, FC.RG_SNP_overlaps,
FC.MG_SNP_overlaps, FC.undef_SNP_overlaps, LGE.InN_SNP_overlaps,
MGE.InN_SNP_overlaps, CGE.InN_SNP_overlaps, GE.RG_SNP_overlaps,
GE.Proj_SNP_overlaps)
all_SNPs_key_df <- all_SNPs_key %>%
arrange(rsid) %>%
distinct(rsid)
all_SNPs_key_df
cat('\nCreating binary df for whether SNP is in/not in peak ... \n')
for (CELL_TYPE in CELL_TYPES) {
cat(paste0('\nObtaining binary counts for: ', CELL_TYPE, ' ... \n'))
# Test vector of rsIDs for cell type
snp_test <- get(paste0(CELL_TYPE, '_SNP_overlaps')) %>%
pull(rsid)
if (exists('all_SNPs_binary_df')) {
all_SNPs_binary_df <- all_SNPs_binary_df %>%
rowwise() %>%
mutate(!!CELL_TYPE := ifelse(rsid %in% snp_test, 1, 0)) %>%
ungroup()
} else {
all_SNPs_binary_df <- all_SNPs_key_df %>%
rowwise() %>%
mutate(!!CELL_TYPE := ifelse(rsid %in% snp_test, 1, 0)) %>%
ungroup()
}
}
all_SNPs_binary_df
write_tsv(all_SNPs_binary_df,
paste0(PEAK_DIR,
'fine_mapped_SNPs/',
'all_cells_PGC3_SCZ_finemapped_SNP_peak_overlaps_ext500bp.tsv'))
all_SNPs_binary_df %>%
dplyr::select(-start, -end)
all_SNPs_binary_df %>%
dplyr::select(-start, -end, -name, -score, -chr_name)
all_SNPs_binary_df %>%
dplyr::select(-start, -end, -name, -score, -chr_name, -strand)
all_SNPs_binary_df %>%
dplyr::select(-start, -end, -name, -score, -chr_name, -strand) %>%
relocate(rsid)
all_SNPs_binary_df %>%
dplyr::select(-start, -end, -name, -score, -chr_name, -strand) %>%
relocate(rsid) %>%
distinct()
all_SNPs_binary_unique_rsids_df <- all_SNPs_binary_df %>%
dplyr::select(-start, -end, -name, -score, -chr_name, -strand) %>%
relocate(rsid) %>%
distinct()
write_tsv(all_SNPs_binary_unique_rsids_df,
paste0(PEAK_DIR,
'fine_mapped_SNPs/',
'all_cells_PGC3_SCZ_finemapped_SNP_peak_overlaps_ext500bp_unique_rsIDs.tsv'))
cat('Done.\n')
